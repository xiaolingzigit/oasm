<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx" 
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans  
                        http://www.springframework.org/schema/beans/spring-beans-4.0.xsd  
                        http://www.springframework.org/schema/context  
                        http://www.springframework.org/schema/context/spring-context-4.0.xsd
                        http://www.springframework.org/schema/tx
	                    http://www.springframework.org/schema/tx/spring-tx-4.0.xsd 
	                    http://www.springframework.org/schema/aop 
	                    http://www.springframework.org/schema/aop/spring-aop-4.0.xsd">
               
	<!-- 自动扫描 -->

	<context:component-scan base-package="com.hd.jy.oasm">
    <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"></context:exclude-filter>
	</context:component-scan>
	
	<!-- 引入配置文件 -->
	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<!-- 允许JVM参数覆盖 -->  
        <property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE" />  
        <!-- 忽略没有找到的资源文件 -->  
        <property name="ignoreResourceNotFound" value="true" /> 
		<property name="location" value="classpath:jdbc.properties"/>
	</bean>
	<!-- 连接池 -->
	<bean id="userDataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />

		<!-- Connection Pooling Info -->
        <property name="maxActive" value="${dbcp.maxActive}" />
        <property name="maxIdle" value="${dbcp.maxIdle}" />
        <property name="defaultAutoCommit" value="false" />
        <!-- 连接Idle一个小时后超时 -->
        <property name="timeBetweenEvictionRunsMillis" value="3600000" />
        <property name="minEvictableIdleTimeMillis" value="3600000" />
   </bean>
   
   
   <!-- sql server连接池 -->
	<!--  <bean id="xjxtDataSource" class="org.apache.commons.dbcp.BasicDataSource"
	    destroy-method="close">
        <property name="driverClassName" value="${dbcp.driver}"/>
        <property name="username" value="${dbcp.user}"/>
        <property name="password" value="${dbcp.pwd}"/>
        <property name="url" value="${dbcp.url}"/>-->
        <!-- Connection Pooling Info -->
       <!--  <property name="maxActive" value="${dbcp.maxActive}" />
        <property name="maxIdle" value="${dbcp.maxIdle}" />
        <property name="defaultAutoCommit" value="false" />-->
        <!-- 连接Idle一个小时后超时 -->
      <!--  <property name="timeBetweenEvictionRunsMillis" value="3600000" />
        <property name="minEvictableIdleTimeMillis" value="3600000" />
    </bean>-->
   <!-- 数据库连接池，连接多个 
   <bean id="dynamicDataSource" class="com.hd.jy.oasm.util.DynamicDataSource">  
        <property name="targetDataSources">  
            <map key-type="java.lang.String">  
                <entry value-ref="userDataSource" key="userDataSource" />  --> 
               <!--   <entry value-ref="xjxtDataSource" key="xjxtDataSource" /> 
            </map>  
        </property> -->  
       <!--  默认使用的数据源   
        <property name="defaultTargetDataSource" ref="userDataSource" />  
    </bean> -->
   
	<!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->
	<bean id="sqlSessionFactoryUser" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!--  <property name="dataSource" ref="dynamicDataSource" />-->
		<property name="dataSource" ref="userDataSource" />
		<!-- 自动扫描mapping.xml文件 -->
		<property name="mapperLocations">
		 <!-- 多个xml包要用array -->
		  <array>
		    <value>classpath:com/hd/jy/oasm/mapping/*.xml</value>
		    <value>classpath:com/hd/jy/oasm/mapping/*/*.xml</value>
		  </array>
		</property>

		<!-- 分页 -->
		<property name="plugins">
		  <array>
		    <bean class="com.hd.jy.oasm.util.PageHelper"/>
		  </array>
		</property>

	</bean>
	
	<!-- <bean id="sqlSessionFactoryXjxt" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="xjxtDataSource" /> -->
		<!-- 自动扫描mapping.xml文件 -->
	<!--<property name="mapperLocations" value="classpath:com/hd/jy/oasm/mapping/*/*.xml"></property>
	</bean>-->

	<!-- DAO接口所在包名，Spring会自动查找其下的类 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!-- 多个mapper用;隔开 -->
		<property name="basePackage" value="com.hd.jy.oasm.dao" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactoryUser"></property>
	</bean>
	
<!-- 	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer"> -->
<!-- 		<property name="basePackage" value="com.hd.jy.oasm.dao" /> -->
<!-- 		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactoryXjxt"></property> -->
<!-- 	</bean> -->

	<!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->
<!-- 	<bean id="xjxtTransactionManager" -->
<!-- 		class="org.springframework.jdbc.datasource.DataSourceTransactionManager"> -->
<!-- 		<property name="dataSource" ref="xjxtDataSource" /> -->
<!-- 	</bean> -->
	<bean id="userTransactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<!--  <property name="dataSource" ref="dynamicDataSource" />-->
		<property name="dataSource" ref="userDataSource" />
	</bean>
	<!--2.通知：增强事务-->
	<tx:advice id="userTxAdvice" transaction-manager="userTransactionManager">
		<tx:attributes>
			<tx:method name="save*"/>
			<tx:method name="update*"/>
			<tx:method name="delete*"/>
			<tx:method name="find*" read-only="true"/>
		</tx:attributes>
	</tx:advice>
<!-- 	<tx:advice id="xjxtTxAdvice" transaction-manager="xjxtTransactionManager"> -->
<!-- 		<tx:attributes> -->
<!-- 			<tx:method name="save*"/> -->
<!-- 			<tx:method name="update*"/> -->
<!-- 			<tx:method name="delete*"/> -->
<!-- 			<tx:method name="find*" read-only="true"/> -->
<!-- 		</tx:attributes> -->
<!-- 	</tx:advice> -->
	<!-- 3.配置切入点与通知相关联-->
	<!--<bean id="sysLogAspect" class="com.hd.jy.oasm.annotation.SystemLogAspect"></bean>-->
<!--	<aop:config>-->
	<!--    <aop:pointcut expression="execution(* com.hd.jy.oasm.action..*.*(..))" id="myPointcut"/>-->
	<!--    <aop:aspect id="asp" ref="sysLogAspect">-->
		<!-- 前置方法 -->
        <!--<aop:before pointcut-ref="myPointcut" method="doBefore"/>-->
        <!--  后置方法-->
       <!-- <aop:after pointcut-ref="myPointcut" method="doAfter"/>-->
        <!-- 后置返回方法 -->
        <!--<aop:after-returning pointcut-ref="myPointcut" method="afterReturn"/>-->
	 <!--   </aop:aspect>-->
	<!--</aop:config> -->

	<!-- 配置切入源切点与通知关联 -->
	<!-- <bean id="dataSourceAspect" class="com.hd.jy.oasm.annotation.DataSourceAspect"></bean>-->
     <!--<aop:config>-->
      <!--  <aop:aspect ref="dataSourceAspect"> -->
            <!-- 拦截所有service方法 -->
            <!-- <aop:pointcut id="dataSourcePointcut" expression="execution(* com.hd.jy.oasm.service..*.*(..))"/>-->
      <!--      <aop:before pointcut-ref="dataSourcePointcut" method="intercept" />-->
       <!-- </aop:aspect>-->
     <!-- </aop:config> --> 
	
 	<aop:config>
		<aop:pointcut expression="execution(* com.hd.jy.oasm.action..*.*(..))" id="mycut"/> 
 		<aop:pointcut expression="execution(* com.hd.jy.oasm.service..*.*(..))" id="mycut"/>  
		<aop:advisor advice-ref="userTxAdvice" pointcut-ref="mycut" /> 
 		<!-- <aop:advisor advice-ref="xjxtTxAdvice" pointcut-ref="mycut" />  -->
 	</aop:config> 
	<!-- 安全管理器 -->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">  
        <property name="authenticator" ref="authenticator"></property>
        <!-- 可以配置多个Realm，其实会把realms属性赋值给ModularRealmAuthenticator的realms属性 -->
        <property name="realms">
            <list>
                <ref bean="CustomersRealm" />
               <!--  <ref bean="ProvinceRealm"/> -->
                <ref bean="AdminRealm"/>
            </list>
        </property>
	</bean>
	<!-- 配置使用自定义认证器，可以实现多Realm认证，并且可以指定特定Realm处理特定类型的验证 -->
    <bean id="authenticator" class="com.hd.jy.oasm.util.CustomizedModularRealmAuthenticator">
        <!-- 配置认证策略，只要有一个Realm认证成功即可，并且返回所有认证成功信息 -->
        <property name="authenticationStrategy">
            <bean class="org.apache.shiro.authc.pam.AtLeastOneSuccessfulStrategy"></bean>
        </property>
    </bean>
    
    
    
    <!-- 普通操作员Realm -->
    <bean id="CustomersRealm" class="com.hd.jy.oasm.util.CustomersRealm"></bean>
    <!-- 省级操作员Realm -->
    <!-- <bean id="ProvinceRealm" class="com.hd.jy.oasm.util.ProvinceRealm"></bean> -->
    <!-- 系统管理员Realm -->
	<bean id="AdminRealm" class="com.hd.jy.oasm.util.AdminRealm"></bean>
	
	<!-- Shiro过滤器 -->
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">  
	    <!-- Shiro的核心安全接口,这个属性是必须的 -->  
	    <property name="securityManager" ref="securityManager"/>
	    <!-- 身份认证失败，则跳转到登录页面的配置 -->  
	   <property name="loginUrl" value="/login/login"/>
	    <!-- 权限认证失败，则跳转到指定页面 -->  
	    <property name="unauthorizedUrl" value="/403.jsp"/>  
	    <!-- 退出登录跳转页面 -->
<!-- 	    <property name=""></property> -->
	    <!-- Shiro连接约束配置,即过滤链的定义 -->  
	        <!-- 这里设置使用shiro过滤的页面必须登录才能使用 -->
	    <property name="filterChainDefinitions">  
	        <value>  
	        	<!-- 静态资源允许访问 -->  
            	/resource/** = anon  
                <!-- 登录页允许访问 -->  
                /index.jsp = anon
                /login/** = anon
                /systemAdmin/adminLogin = anon
                /systemAdmin/adminCheck = anon
                <!-- 新添 
                /home/main = anon
                /systemAdmin/** = anon -->
                <!-- 其他资源需要认证 -->  
<!--                 /systemAdmin/adminBlank = authc,roles["admin,superAdmin"] -->
<!--                 /** = authc -->
	        </value>  
	        
	    </property>
	</bean>  
	
	<!-- 保证实现了Shiro内部lifecycle函数的bean执行 -->  
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>  
	
	<!-- 开启Shiro注解 -->
	<bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor"/>
  	<bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">  
  	  <property name="securityManager" ref="securityManager"/>  
    </bean>
</beans>